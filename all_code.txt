

# FILE: ./Toros Website/index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CS 4366 Senior Capstone</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <ul>
				<li><a href="index.html">Home</a></li>
				<li><a href="about_us.html">About Us</a></li>
				<li><a href="meetings.html">Meetings</a></li>
				<li><a href="upcoming_schedules.html">Upcoming Schedules</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h1>CS 4366 Senior Capstone</h1>
		<h2>Team Toros</h2>
		<h3>Nathan Pierce: Group Leader</h3>
		<h3>Brett Alford: Database Engineer</h3>
		<h3>Yash Sharma: Back End Engineer</h3>
		<h3>Jaron Hardage: Front End Engineer</h3>
		<p>Link to GitHub <a href="https://github.com/Toaster124/CS-Capstone" target="_blank">HERE</a>.</p>
        <p>Link to Jira <a href="https://schoolingscollege.atlassian.net/jira/software/projects/SCRUM/boards/1" target="_blank">HERE</a>.</p>
    </main>
</body>
</html>


# FILE: ./Toros Website/meetings.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meetings - Team Toros</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="index.html">Home</a></li>
                <li><a href="about_us.html">About Us</a></li>
                <li><a href="meetings.html">Meetings</a></li>
				<li><a href="upcoming_schedules.html">Upcoming Schedules</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h1>Meetings</h1>
        <ul class="meetings-list">
            <li>
                <h3>9/3/24 - Attendees: Nathan, Jaron, Brett, Yash</h3>
                <p>Discussion of project ideas. Decided on Biometric authentication ideas.</p>
            </li>
            <li>
                <h3>9/4/24 - Attendees: Nathan, Jaron, Brett, Yash</h3>
                <p>Discussion of more project ideas. Decided on presenting several ideas to professor:</p>
                <ul>
                    <li>Tinder for Forests</li>
                    <li>Real-time music collaboration tool</li>
                    <li>Location-based media recommendations</li>
                </ul>
            </li>
            <li>
                <h3>9/5/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Discussion of SRS and splitting up the Report into sections for each member to accomplish. Development of interview questions to ask interviewees. Discussing implementation methods of CollaBand (Peer-to-peer vs. Client-Server).</p>
            </li>
            <li>
                <h3>9/10/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Discussing more details of what features CollaBand will have (users, projects, tutorials). Discussing Presentation roles and slideshow creation by member.</p>
            </li>
            <li>
                <h3>9/13/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Creating system diagram and discussing technologies to implement.</p>
            </li>
            <li>
                <h3>9/16/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Revising system diagram. Discussing finalizing touches on Report and Presentation.</p>
            </li>
            <li>
                <h3>9/19/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Practicing presentation and reviewing presentation slides for quality. Discussing final touches of the report and presentation.</p>
            </li>
			<li>
                <h3>10/2/24 - Attendees: Nathan, Jaron, Brett</h3>
                <p>Discussing work division and planning for Stage 2 report and presentation.</p>
            </li>
			<li>
                <h3>10/9/24 - Attendees: Nathan, Jaron, Brett, Yash</h3>
                <p>Practicing presentation and reviewing presentation slides for quality. Discussing final touches of the report and presentation.</p>
            </li>
        </ul>
    </main>
</body>
</html>


# FILE: ./Toros Website/about_us.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - Team Toros</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="index.html">Home</a></li>
                <li><a href="about_us.html">About Us</a></li>
                <li><a href="meetings.html">Meetings</a></li>
				<li><a href="upcoming_schedules.html">Upcoming Schedules</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h1>About Us</h1>
        <section>
            <h2>Nathan Pierce - Group Leader and Project Manager</h2>
			<h3>Individual Contributions to the Project:</h3>
            <p>Stage 1: Creating team github, webiste, and Jira. Contributing to Software Requirements Specification, presentation, and reviewing both for consistency and quality.</p>
			<p>Stage 2: Developing Use Case Diagrams for the report and presentation and reviewing for quality.</p>
            
            <h2>Brett Alford - Database Engineer</h2>
			<h3>Individual Contributions to the Project:</h3>
            <p>Stage 1: Evaluating interview content and user input. Contributing to Software Requirements Specification and presentation, and reviewing both for consistency and quality.</p>
			<p>Stage 2: Developing Sequence Diagrams for the report and presentation and reviewing for quality.</p>

            <h2>Yash Sharma - Front End Engineer</h2>
			<h3>Individual Contributions to the Project:</h3>
            <p>Stage 1: Developing project ideas, contributing to Software Requirements Specification, and presentation slides.</p>
			<p>Stage 2: Developing Low-Fidelity Prototype for report and presentation and reviewing for quality.</p>

            <h2>Jaron Hardage - Back End Engineer</h2>
			<h3>Individual Contributions to the Project:</h3>
            <p>Stage 1: Contributing to Software Requirements Specification, presentation, and reviewing both for consistency and quality.</p>
			<p>Stage 2: Developing UML Class Diagrams and implementation plan for report and presentation and reviewing for quality.</p>
			
        </section>
    </main>
</body>
</html>


# FILE: ./Toros Website/upcoming_schedules.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Upcoming Schedules - Team Toros</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="index.html">Home</a></li>
                <li><a href="about_us.html">About Us</a></li>
                <li><a href="meetings.html">Meetings</a></li>
                <li><a href="upcoming_schedules.html">Upcoming Schedules</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h1>Upcoming Schedules</h1>
        <div class="schedule">
            <p><strong>Stage 2:</strong> Due October 10</p>
            <p><strong>Stage 2 Presentation Practice:</strong> October 13</p>
            <p><strong>Stage 2 Presentation:</strong> October 14</p>
        </div>
        <h3>Due to rapidly shifting availability, we have decided to have flexible meeting times for group meetings on a regular basis of 2x a week.</h3>
    </main>
</body>
</html>


# FILE: ./styles.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    color: #333;
}

header {
    background-color: #26a9cc;
    padding: 10px 0;
    text-align: center;
}

nav ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}

nav ul li {
    display: inline;
    margin: 0 15px;
}

nav ul li a {
    color: white;
    text-decoration: none;
    font-weight: bold;
}

main {
    max-width: 800px; /* Limit the width of the content area */
    margin: 0 auto; /* Center the content horizontally */
    padding: 20px;
    text-align: left; /* Ensure text aligns to the left */
}

h1, h2 {
    color: #007bff;
}

h2 {
    font-size: 1.5em;
}

h3 {
    color: #333;
    font-size: 1.2em; /* Slightly larger than the paragraph, smaller than h2 */
}

p {
    font-size: 1em;
}

.meetings-list {
    max-width: 800px;
    margin: 0 auto;
    padding: 10px;
    text-align: left; /* Align text to the left */
}

.meetings-list ul {
    list-style-type: disc;
    margin-left: 40px;
}

.meetings-list li {
    margin-bottom: 20px;
}

.schedule {
    background-color: #e3f2fd;
    padding: 20px;
    border-radius: 8px;
    margin-bottom: 20px;
    text-align: left;
}

.schedule p {
    font-size: 1.1em;
    font-weight: bold;
    margin: 10px 0;
}



# FILE: ./collaband_frontend/cypress/integration/login_spec.js

// cypress/integration/login_spec.js
describe('Login Test', () => {
    it('Logs in with valid credentials', () => {
      cy.visit('http://localhost:3000/login');
      cy.get('input').first().type('testuser'); // Adjust selectors as needed
      cy.get('input').eq(1).type('TestPass123!');
      cy.get('button[type="submit"]').click();
      cy.url().should('include', '/dashboard');
      cy.contains('Your Projects');
    });
  });
  

# FILE: ./collaband_frontend/public/index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>


# FILE: ./collaband_frontend/.eslintrc.js

// .eslintrc.js
module.exports = {
    env: {
      browser: true,
      es2021: true,
      jest: true,
    },
    extends: ['react-app', 'eslint:recommended', 'plugin:react/recommended', 'plugin:prettier/recommended'],
    parserOptions: {
      ecmaFeatures: {
        jsx: true,
      },
      ecmaVersion: 12,
    },
    plugins: ['react', 'prettier'],
    rules: {
      // Custom rules
      'prettier/prettier': 'error',
    },
  };
  

# FILE: ./collaband_frontend/src/reportWebVitals.js

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


# FILE: ./collaband_frontend/src/App.css

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


# FILE: ./collaband_frontend/src/index.js

//import './index.css';

//const root = ReactDOM.createRoot(document.getElementById('root'));
//root.render(
//  <React.StrictMode>
//    <App />
//  </React.StrictMode>
//);

// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import theme from './theme';
import { ThemeProvider } from '@mui/material/styles';
import { Provider } from 'react-redux';
import store from './redux/store';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <Provider store={store}>
    <React.StrictMode>
      <ThemeProvider theme={theme}>
        <App />
      </ThemeProvider>
    </React.StrictMode>
  </Provider>,
  document.getElementById('root'),
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


# FILE: ./collaband_frontend/src/theme.js

// src/theme.js
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#426B1F', // Customize primary color
    },
    secondary: {
      main: '#f50057', // Customize secondary color
    },
  },
});

export default theme;


# FILE: ./collaband_frontend/src/utils/pubnubClient.js

// src/utils/pubnubClient.js
import PubNub from 'pubnub';

const pubnub = new PubNub({
  publishKey: 'YOUR_PUBLISH_KEY', // Replace with PubNub publish key
  subscribeKey: 'YOUR_SUBSCRIBE_KEY', // Replace with PubNub subscribe key
  uuid: 'YOUR_UUID', // Replace with a unique identifier for the user
});

// Function to subscribe to a channel
export const subscribeToChannel = (channel, onMessage) => {
  pubnub.subscribe({ channels: [channel] });
  pubnub.addListener({
    message: event => {
      console.log('New message received:', event.message);
      if (onMessage) onMessage(event.message);
    },
  });
};

// Function to publish a message to a channel
export const publishMessage = (channel, message) => {
  pubnub.publish({ channel, message }, (status, response) => {
    if (status.error) {
      console.error('Failed to publish message:', status);
    } else {
      console.log('Message published:', response);
    }
  });
};

export default pubnub;


# FILE: ./collaband_frontend/src/utils/websocket.js

// src/utils/websocket.js
export function initWebSocket(projectId) {
  const token = localStorage.getItem('token');
  const ws = new WebSocket(
    `ws://localhost:8000/ws/collaboration/${projectId}/?token=${token}`,
  );

  ws.onopen = () => {
    console.log('WebSocket connection established');
  };

  ws.onmessage = event => {
    /*    const data = JSON.parse(event.data);
    // Handle incoming messages
    handleMessage(data);
*/
    console.log('Received message:', event.data);
  };

  ws.onclose = () => {
    console.log('WebSocket connection closed');
  };

  return ws;
}


# FILE: ./collaband_frontend/src/utils/chatHandler.js

// src/utils/chatHandler.js
import { subscribeToChannel, publishMessage } from './pubnubClient';
import api from './api';

// Function to connect to the chat channel
export const connectToChat = (chatId, onMessage) => {
  subscribeToChannel(chatId, onMessage);
};

// Function to send a message to the chat channel
export const sendMessage = (chatId, message) => {
  publishMessage(chatId, message);
};

// Function to fetch chat history from the backend
export const fetchChatHistory = async chatId => {
  try {
    const response = await api.get(`/chats/${chatId}/history/`);
    return response.data;
  } catch (error) {
    console.error('Failed to fetch chat history:', error);
    throw error;
  }
};


# FILE: ./collaband_frontend/src/utils/api.js

// src/utils/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://192.168.1.67:8000/', // Update with your back-end URL
});

api.interceptors.request.use(
  config => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Token ${token}`; // Adjust based on your back-end authentication
    }
    return config;
  },
  error => Promise.reject(error),
);

export default api;


# FILE: ./collaband_frontend/src/index.css

/* src/index.css */

body {
  margin: 0;
  font-family: Arial, sans-serif;
}

header {
  background-color: #333;
  color: white;
  padding: 10px;
}

header nav a {
  color: white;
  margin-right: 15px;
  text-decoration: none;
}

header nav button {
  background: none;
  border: none;
  color: white;
  cursor: pointer;
}

div {
  padding: 20px;
}

button {
  margin: 5px;
  padding: 10px;
}

.error-message {
  color: red;
  margin-top: 10px;
}


# FILE: ./collaband_frontend/src/components/Header.js

// src/components/Header.js
import React, { useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../redux/actions/authActions';
import { AppBar, Toolbar, Typography, Button } from '@mui/material';
import { Link as RouterLink, useNavigate } from 'react-router-dom';

function Header() {
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleLogout = () => {
    dispatch(logout());
    navigate('/');
  };

  useEffect(() => {
    console.log('isAuthenticated changed:', isAuthenticated);
  }, [isAuthenticated]);

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography
          variant="h6"
          component={RouterLink}
          to="/"
          sx={{ flexGrow: 1, textDecoration: 'none', color: 'inherit' }}
        >
          CollaBand
        </Typography>
        {isAuthenticated ? (
          <>
            <Button color="inherit" component={RouterLink} to="/dashboard">
              Dashboard
            </Button>
            <Button color="inherit" component={RouterLink} to="/profile">
              Profile
            </Button>
            <Button color="inherit" onClick={handleLogout}>
              Logout
            </Button>
          </>
        ) : (
          <>
            <Button color="inherit" component={RouterLink} to="/login">
              Login
            </Button>
            <Button color="inherit" component={RouterLink} to="/register">
              Register
            </Button>
          </>
        )}
      </Toolbar>
    </AppBar>
  );
}

export default Header;


# FILE: ./collaband_frontend/src/components/VirtualKeyboard.js

// src/components/VirtualKeyboard.js

import React from 'react';

function VirtualKeyboard({ instrument, audioContext, onPlayNote }) {
  const handleNoteClick = note => {
    if (instrument) {
      // Check if the AudioContext is suspended and resume it
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      instrument.play(note);
      if (onPlayNote) {
        onPlayNote(note, 0.8);
      }
    }
  };

  return (
    <div>
      {/* Virtual Keyboard Buttons */}
      <div>
        <button onClick={() => handleNoteClick('C4')}>C</button>
        <button onClick={() => handleNoteClick('D4')}>D</button>
        <button onClick={() => handleNoteClick('E4')}>E</button>
        <button onClick={() => handleNoteClick('F4')}>F</button>
        <button onClick={() => handleNoteClick('G4')}>G</button>
        <button onClick={() => handleNoteClick('A4')}>A</button>
        <button onClick={() => handleNoteClick('B4')}>B</button>
        <button onClick={() => handleNoteClick('C5')}>C5</button>
      </div>
    </div>
  );
}

export default VirtualKeyboard;


# FILE: ./collaband_frontend/src/components/ErrorBoundary.js

// src/components/ErrorBoundary.js
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state to display fallback UI
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can log the error to a logging service
    console.error('ErrorBoundary caught an error', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // Fallback UI
      return <h2>Something went wrong.</h2>;
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


# FILE: ./collaband_frontend/src/components/MusicNotation.js

// src/components/MusicNotation.js

import React, { useEffect, useRef } from 'react';
import Vex from 'vexflow';

function MusicNotation({ notes }) {
  const divRef = useRef(null);

  useEffect(() => {
    const VF = Vex.Flow;
    const div = divRef.current;
    div.innerHTML = ''; // Clear previous rendering

    // Create the renderer
    const renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);

    // Convert note strings to VexFlow StaveNotes
    let staveNotes = notes.map(note => {
      return new VF.StaveNote({
        clef: 'treble',
        keys: [note],
        duration: 'q',
      });
    });

    // If no notes, add a whole rest to prevent errors
    if (staveNotes.length === 0) {
      staveNotes = [
        new VF.StaveNote({
          clef: 'treble',
          keys: ['b/4'],
          duration: 'wr', // 'wr' stands for whole rest
        }),
      ];
    }

    // Calculate total duration of notes in ticks
    const totalDurationTicks = staveNotes.reduce((sum, note) => sum + note.getTicks().value(), 0);

    // Ticks per measure (default resolution is 4096 ticks per whole note)
    const ticksPerMeasure = VF.RESOLUTION * 4; // For 4/4 time signature

    // Calculate the number of measures needed
    const measuresNeeded = Math.ceil(totalDurationTicks / ticksPerMeasure) || 1;

    // Adjust the width of the renderer based on the number of measures
    const staveWidth = 500 * measuresNeeded;
    renderer.resize(staveWidth + 20, 200); // Add some padding

    const context = renderer.getContext();
    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');

    // Create a stave
    const stave = new VF.Stave(10, 40, staveWidth);
    stave.addClef('treble').addTimeSignature('4/4');
    stave.setContext(context).draw();

    // Create a voice in 4/4 and add the notes
    const voice = new VF.Voice({ num_beats: 4 * measuresNeeded, beat_value: 4 }).setMode(VF.Voice.Mode.SOFT);
    voice.addTickables(staveNotes);

    // Format and justify the notes to fit the stave width
    new VF.Formatter().joinVoices([voice]).format([voice], staveWidth);

    // Render voice
    voice.draw(context, stave);
  }, [notes]);

  return <div ref={divRef}></div>;
}

export default MusicNotation;


# FILE: ./collaband_frontend/src/components/ProtectedRoute.js

// src/components/ProtectedRoute.js
import React from 'react';
import { Navigate } from 'react-router-dom';
import PropTypes from 'prop-types';

function ProtectedRoute({ children }) {
  const isAuthenticated = !!localStorage.getItem('token');
  return isAuthenticated ? children : <Navigate to="/login" replace />;
}

ProtectedRoute.propTypes = {
  children: PropTypes.element.isRequired,
};

export default ProtectedRoute;


# FILE: ./collaband_frontend/src/components/Chat.js

// src/components/Chat.js
import React, { useState, useEffect } from 'react';
import { connectToChat, sendMessage } from '../utils/chatHandler';

const Chat = ({ chatId }) => {
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');

  useEffect(() => {
    connectToChat(chatId, message => {
      setMessages(prevMessages => [...prevMessages, message]);
    });
  }, [chatId]);

  const handleSendMessage = () => {
    if (newMessage.trim()) {
      sendMessage(chatId, newMessage);
      setNewMessage('');
    }
  };

  return (
    <div>
      <div className="chat-messages">
        {messages.map((msg, index) => (
          <div key={index} className="chat-message">
            {msg}
          </div>
        ))}
      </div>
      <input
        type="text"
        value={newMessage}
        onChange={e => setNewMessage(e.target.value)}
        placeholder="Type a message..."
      />
      <button onClick={handleSendMessage}>Send</button>
    </div>
  );
};

export default Chat;


# FILE: ./collaband_frontend/src/__tests__/VirtualKeyboard.test.js

/* eslint-env jest */
// src/__tests__/VirtualKeyboard.test.js

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import VirtualKeyboard from '../components/VirtualKeyboard';

test('VirtualKeyboard renders and plays notes', () => {
  const onPlayNote = jest.fn(); // Define onPlayNote

  render(<VirtualKeyboard onPlayNote={onPlayNote} />);
  const noteButton = screen.getByText('C');
  fireEvent.click(noteButton);
  expect(onPlayNote).toHaveBeenCalledWith('C4', 0.8);
});


# FILE: ./collaband_frontend/src/__tests__/MusicEditor.test.js

// src/__tests__/MusicEditor.test.js
import React from 'react';
import { render } from '@testing-library/react';
import MusicEditor from '../pages/MusicEditor';
import { BrowserRouter as Router } from 'react-router-dom';

test('MusicEditor renders without crashing', () => {
  render(
    <Router>
      <MusicEditor />
    </Router>,
  );
});


# FILE: ./collaband_frontend/src/pages/NotFound.js

// src/pages/NotFound.js
import React from 'react';
import { Link } from 'react-router-dom';

function NotFound() {
  return (
    <div>
      <h2>404 - Page Not Found</h2>
      <p>
        Go back to the <Link to="/">Home Page</Link>.
      </p>
    </div>
  );
}

export default NotFound;


# FILE: ./collaband_frontend/src/pages/Profile.js

// src/pages/Profile.js
import React, { useState, useEffect } from 'react';
import api from '../utils/api';

function Profile() {
  const [user, setUser] = useState({ username: '', email: '' });

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const response = await api.get('/auth/user/');
        setUser(response.data);
      } catch (err) {
        console.error('Failed to fetch user data', err);
      }
    };
    fetchUser();
  }, []);

  return (
    <div>
      <h2>Your Profile</h2>
      <div>
        <label>Username:</label>
        <p>{user.username}</p>
      </div>
      <div>
        <label>Email:</label>
        <p>{user.email}</p>
      </div>
      {/* Optionally include form to update profile information */}
    </div>
  );
}

export default Profile;


# FILE: ./collaband_frontend/src/pages/MusicEditor.js

// src/pages/MusicEditor.js

import React, { useEffect, useRef, useState } from 'react';
import { useParams } from 'react-router-dom';
import { initWebSocket } from '../utils/websocket';
import { Typography } from '@mui/material';
import VirtualKeyboard from '../components/VirtualKeyboard';
import MusicNotation from '../components/MusicNotation';
import Soundfont from 'soundfont-player';

function MusicEditor() {
  const [notes, setNotes] = useState([]);
  const { projectId } = useParams();
  const wsRef = useRef(null);
  const [instrument, setInstrument] = useState(null);
  const [instrumentName, setInstrumentName] = useState('acoustic_grand_piano');
  const [audioContext] = useState(
    new (window.AudioContext || window.webkitAudioContext)(),
  );

  // Load the selected instrument with error handling
  useEffect(() => {
    Soundfont.instrument(audioContext, instrumentName)
      .then(inst => {
        setInstrument(inst);
      })
      .catch(error => {
        console.error('Failed to load instrument:', error);
      });
  }, [audioContext, instrumentName]);

  // Initialize WebSocket
  useEffect(() => {
    const ws = initWebSocket(projectId);
    wsRef.current = ws;

    ws.onmessage = event => {
      const message = JSON.parse(event.data);
      if (message.type === 'notePlayed') {
        playNoteLocally(message.data.note, message.data.velocity);
      }
    };

    return () => {
      ws.close();
    };
  }, [projectId]);

  // Handle playing a note locally and sending it to the server
  const playNote = (note, velocity) => {
    // Send note to server
    const message = {
      type: 'notePlayed',
      data: { note, velocity },
    };
    wsRef.current.send(JSON.stringify(message));

    // Play note locally
    playNoteLocally(note, velocity);
  };

  // Handle playing a note received from the server
  const playNoteLocally = (note, velocity) => {
    if (instrument) {
      // Check if the AudioContext is suspended and resume it
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      instrument.play(note, audioContext.currentTime, { gain: velocity });
    }
    // Update notation
    addNoteToNotation(note);
  };

  // Update the notation with the new note
  const addNoteToNotation = note => {
    const noteMapping = {
      C4: 'c/4',
      D4: 'd/4',
      E4: 'e/4',
      F4: 'f/4',
      G4: 'g/4',
      A4: 'a/4',
      B4: 'b/4',
      C5: 'c/5',
    };
    setNotes(prevNotes => [...prevNotes, noteMapping[note]]);
  };

  // Handle instrument selection change
  const handleInstrumentChange = event => {
    setInstrumentName(event.target.value);
  };

  return (
    <div>
      <Typography variant="h4">Music Editor</Typography>

      {/* Instrument Selector */}
      <div>
        <select value={instrumentName} onChange={handleInstrumentChange}>
          <option value="acoustic_grand_piano">Piano</option>
          <option value="violin">Violin</option>
          <option value="trumpet">Trumpet</option>
          <option value="electric_guitar_jazz">Electric Guitar</option>
          {/* Add more options as needed */}
        </select>
      </div>

      <MusicNotation notes={notes} />

      {instrument ? (
        <VirtualKeyboard
          instrument={instrument}
          audioContext={audioContext}
          onPlayNote={playNote}
        />
      ) : (
        <div>Loading instrument...</div>
      )}
    </div>
  );
}

export default MusicEditor;


# FILE: ./collaband_frontend/src/pages/Register.js

// src/pages/Register.js
import React, { useState } from 'react';
import { Button, TextField, Container, Typography, Box } from '@mui/material';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import api from '../utils/api';

function Register() {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    password2: '',
  });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async e => {
    e.preventDefault();
    if (formData.password !== formData.password2) {
      setError('Passwords do not match');
      return;
    }
    try {
      await api.post('/auth/register/', {
        username: formData.username,
        email: formData.email,
        password: formData.password,
      });
      navigate('/login');
    } catch (err) {
      setError('Registration failed');
    }
  };

  return (
    <Container maxWidth="sm">
      <Box mt={5}>
        <Typography variant="h4" gutterBottom>
          Register
        </Typography>
        <form onSubmit={handleSubmit}>
          <TextField
            label="Username"
            fullWidth
            margin="normal"
            required
            value={formData.username}
            onChange={e =>
              setFormData({ ...formData, username: e.target.value })
            }
          />
          <TextField
            label="Email"
            fullWidth
            margin="normal"
            required
            type="email"
            value={formData.email}
            onChange={e => setFormData({ ...formData, email: e.target.value })}
          />
          <TextField
            label="Password"
            fullWidth
            margin="normal"
            type="password"
            required
            value={formData.password}
            onChange={e =>
              setFormData({ ...formData, password: e.target.value })
            }
          />
          <TextField
            label="Confirm Password"
            fullWidth
            margin="normal"
            type="password"
            required
            value={formData.password2}
            onChange={e =>
              setFormData({ ...formData, password2: e.target.value })
            }
          />
          {error && (
            <Typography color="error" variant="body2">
              {error}
            </Typography>
          )}
          <Box mt={2}>
            <Button variant="contained" color="primary" type="submit">
              Register
            </Button>
          </Box>
        </form>
        <Box mt={2}>
          <Typography variant="body2">
            Already have an account?{' '}
            <RouterLink to="/login">Login here</RouterLink>.
          </Typography>
        </Box>
      </Box>
    </Container>
  );
}

export default Register;


# FILE: ./collaband_frontend/src/pages/Home.js

// src/pages/Home.js
import React from 'react';
import { Typography, Container, Button, Box } from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';

function Home() {
  const isAuthenticated = !!localStorage.getItem('token');

  return (
    <Container>
      <Box textAlign="center" mt={5}>
        <Typography variant="h2" gutterBottom>
          Welcome to CollaBand
        </Typography>
        <Typography variant="h5" gutterBottom>
          The Ultimate Music Collaboration Hub
        </Typography>
        {!isAuthenticated && (
          <Box mt={3}>
            <Button
              variant="contained"
              color="primary"
              component={RouterLink}
              to="/register"
              sx={{ mr: 2 }}
            >
              Create an Account
            </Button>
            <Button
              variant="outlined"
              color="primary"
              component={RouterLink}
              to="/login"
            >
              Log In
            </Button>
          </Box>
        )}
      </Box>
    </Container>
  );
}

export default Home;


# FILE: ./collaband_frontend/src/pages/ProjectDetails.js

// src/pages/ProjectDetails.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate, Link as RouterLink } from 'react-router-dom';
import { Typography, Container, Button, Box } from '@mui/material';
import api from '../utils/api';

function ProjectDetails() {
  const { projectId } = useParams();
  const [userRole, setUserRole] = useState('');
  const [project, setProject] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchProject = async () => {
      try {
        const response = await api.get(`/api/collaband/projects/${projectId}/`);
        setProject(response.data.project);
        setUserRole(response.data.userRole); // Assuming the back end provides userRole
      } catch (err) {
        console.error('Failed to fetch project details', err);
      }
    };
    fetchProject();
  }, [projectId]);

  const handleDelete = async () => {
    try {
      await api.delete(`/collaband/projects/${projectId}/`);
      navigate('/dashboard');
    } catch (err) {
      console.error('Failed to delete project', err);
    }
  };

  if (!project) {
    return <Typography>Loading project details...</Typography>;
  }

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        {project.projectName}
      </Typography>
      <Typography variant="body1" gutterBottom>
        {project.description}
      </Typography>
      <Box mt={2}>
        <Button
          variant="contained"
          color="primary"
          component={RouterLink}
          to={`/projects/${projectId}/music-editor`}
          sx={{ mr: 2 }}
        >
          Open Music Editor
        </Button>
        {/* Conditionally render buttons based on userRole */}
        {(userRole === 'owner' || userRole === 'admin') && (
          <Button variant="outlined" color="secondary" onClick={handleDelete}>
            Delete Project
          </Button>
        )}
      </Box>
    </Container>
  );
}

export default ProjectDetails;


# FILE: ./collaband_frontend/src/pages/Login.js

// src/pages/Login.js
import React, { useState, useEffect } from 'react';
import { Button, TextField, Container, Typography, Box } from '@mui/material';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { login } from '../redux/actions/authActions';

function Login() {
  const [emailOrUsername, setEmailOrUsername] = useState('');
  const [password, setPassword] = useState('');
  const error = useSelector(state => state.auth.error);
  const isAuthenticated = useSelector(state => state.auth.isAuthenticated);
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const handleSubmit = e => {
    e.preventDefault();
    dispatch(login(emailOrUsername, password));
  };

  useEffect(() => {
    if (isAuthenticated) {
      navigate('/dashboard');
    }
  }, [isAuthenticated, navigate]);

  return (
    <Container maxWidth="sm">
      <Box mt={5}>
        <Typography variant="h4" gutterBottom>
          Login
        </Typography>
        <form onSubmit={handleSubmit}>
          <TextField
            label="Email or Username"
            fullWidth
            margin="normal"
            required
            value={emailOrUsername}
            onChange={e => setEmailOrUsername(e.target.value)}
          />
          <TextField
            label="Password"
            fullWidth
            margin="normal"
            type="password"
            required
            value={password}
            onChange={e => setPassword(e.target.value)}
          />
          {error && (
            <Typography color="error" variant="body2">
              {error}
            </Typography>
          )}
          <Box mt={2}>
            <Button variant="contained" color="primary" type="submit">
              Login
            </Button>
          </Box>
        </form>
        <Box mt={2}>
          <Typography variant="body2">
            Don&apos;t have an account?{' '}
            <RouterLink to="/register">Register here</RouterLink>.
          </Typography>
        </Box>
      </Box>
    </Container>
  );
}

export default Login;


# FILE: ./collaband_frontend/src/pages/CreateProject.js

// CreateProject.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../utils/api';
import { Container, TextField, Button, Typography } from '@mui/material';

function CreateProject() {
  const [projectName, setProjectName] = useState('');
  const [description, setDescription] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleCreateProject = async () => {
    try {
      const response = await api.post('/api/collaband/dashboard/', {
        projectName,
        description,
      });
      navigate(`/projects/${response.data.id}`);
    } catch (err) {
      console.error('Failed to create project', err);
      setError('Failed to create project. Please try again.');
    }
  };

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Create New Project
      </Typography>
      <TextField
        label="Project Name"
        fullWidth
        margin="normal"
        required
        value={projectName}
        onChange={e => setProjectName(e.target.value)}
      />
      <TextField
        label="Description"
        fullWidth
        margin="normal"
        multiline
        rows={4}
        value={description}
        onChange={e => setDescription(e.target.value)}
      />
      {error && (
        <Typography color="error" variant="body2">
          {error}
        </Typography>
      )}
      <Button
        variant="contained"
        color="primary"
        onClick={handleCreateProject}
        disabled={!projectName}
      >
        Create Project
      </Button>
    </Container>
  );
}

export default CreateProject;


# FILE: ./collaband_frontend/src/pages/Dashboard.js

// src/pages/Dashboard.js
import React, { useEffect, useState } from 'react';
import {
  Typography,
  Container,
  Button,
  List,
  ListItem,
  ListItemText,
} from '@mui/material';
import { Link as RouterLink } from 'react-router-dom';
import api from '../utils/api';

function Dashboard() {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const response = await api.get('/api/collaband/dashboard/');
        setProjects(response.data.projects);
      } catch (err) {
        console.error('Failed to fetch projects', err);
      }
    };
    fetchProjects();
  }, []);

  return (
    <Container>
      <Typography variant="h4" gutterBottom>
        Your Projects
      </Typography>
      <Button
        variant="contained"
        color="primary"
        component={RouterLink}
        to="/projects/new"
      >
        Create New Project
      </Button>
      <List>
        {projects.map(project => (
          <ListItem
            key={project.id}
            button
            component={RouterLink}
            to={`/projects/${project.id}`}
          >
            <ListItemText
              primary={project.projectName}
              secondary={project.description}
            />
          </ListItem>
        ))}
      </List>
    </Container>
  );
}

export default Dashboard;


# FILE: ./collaband_frontend/src/redux/store.js

// src/redux/store.js
import { createStore, applyMiddleware, combineReducers } from 'redux';
import { thunk } from 'redux-thunk';
import authReducer from './reducers/authReducer';
import projectReducer from './reducers/projectReducer';

const rootReducer = combineReducers({
  auth: authReducer,
  projects: projectReducer,
  // Add other reducers here
});

const middleware = [thunk];

const store = createStore(rootReducer, applyMiddleware(...middleware));

export default store;


# FILE: ./collaband_frontend/src/redux/actions/projectActions.js

// src/redux/actions/projectActions.js
import api from '../../utils/api';

export const fetchProjects = () => async dispatch => {
  try {
    const token = localStorage.getItem('token');
    const response = await api.get('collaband/dashboard/', {
      headers: {
        Authorization: `Token ${token}`, // Make sure this header is set correctly
      },
    });
    dispatch({
      type: 'FETCH_PROJECTS_SUCCESS',
      payload: response.data.projects,
    });
  } catch (error) {
    dispatch({
      type: 'FETCH_PROJECTS_FAIL',
      payload: error.response?.data || 'Something went wrong',
    });
  }
};


# FILE: ./collaband_frontend/src/redux/actions/authActions.js

// src/redux/actions/authActions.js
import api from '../../utils/api';

export const login = (emailOrUsername, password) => async dispatch => {
  try {
    dispatch({ type: 'LOGIN_REQUEST' });
    const response = await api.post('/auth/login/', {
      email_or_username: emailOrUsername,
      password,
    });
    localStorage.setItem('token', response.data.token);
    dispatch({
      type: 'LOGIN_SUCCESS',
      payload: { user: response.data.user },
    });
  } catch (error) {
    dispatch({
      type: 'LOGIN_FAIL',
      payload: error.response?.data || 'Something went wrong',
    });
  }
};

export const register = userData => async dispatch => {
  try {
    dispatch({ type: 'REGISTER_REQUEST' });
    await api.post('/auth/register/', userData);
    dispatch({
      type: 'REGISTER_SUCCESS',
    });
  } catch (error) {
    dispatch({
      type: 'REGISTER_FAIL',
      payload: error.response?.data || 'Something went wrong',
    });
  }
};

export const logout = () => dispatch => {
  localStorage.removeItem('token');
  localStorage.removeItem('user');
  dispatch({ type: 'LOGOUT' });
};


# FILE: ./collaband_frontend/src/redux/reducers/projectReducer.js

// src/redux/reducers/projectReducer.js
const initialState = {
  projects: [],
  currentProject: null,
  loading: false,
  error: null,
};

export default function projectReducer(state = initialState, action) {
  switch (action.type) {
    case 'FETCH_PROJECTS_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_PROJECTS_SUCCESS':
      return { ...state, loading: false, projects: action.payload };
    case 'FETCH_PROJECTS_FAILURE':
      return { ...state, loading: false, error: action.payload };
    // Add other case statements as needed
    default:
      return state;
  }
}


# FILE: ./collaband_frontend/src/redux/reducers/authReducer.js

// src/redux/reducers/authReducer.js
const initialState = {
  isAuthenticated: !!localStorage.getItem('token'),
  user: localStorage.getItem('token')
    ? JSON.parse(localStorage.getItem('user'))
    : null,
  error: null,
  loading: false,
};

export default function authReducer(state = initialState, action) {
  switch (action.type) {
    case 'LOGIN_SUCCESS':
      localStorage.setItem('user', JSON.stringify(action.payload.user));
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        error: null,
        loading: false,
      };
    case 'LOGIN_FAIL':
    case 'REGISTER_FAIL':
      return {
        ...state,
        isAuthenticated: false,
        error: action.payload,
        loading: false,
      };
    case 'LOGOUT':
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      return {
        ...state,
        isAuthenticated: false,
        user: null,
      };
    default:
      return state;
  }
}


# FILE: ./collaband_frontend/src/App.js

// src/App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { CssBaseline } from '@mui/material';

// Page Components
import Home from './pages/Home';
import Login from './pages/Login';
import Register from './pages/Register';
import Dashboard from './pages/Dashboard';
import CreateProject from './pages/CreateProject';
import MusicEditor from './pages/MusicEditor';
import Profile from './pages/Profile';
import ProjectDetails from './pages/ProjectDetails';
import NotFound from './pages/NotFound';

// Custom Components
import Header from './components/Header';
import ProtectedRoute from './components/ProtectedRoute';

function App() {
  return (
    <Router>
      <CssBaseline />
      <Header />
      <Routes>
        {/* Public Routes */}
        <Route path="/" element={<Home />} />
        <Route path="/login" element={<Login />} />
        <Route path="/register" element={<Register />} />
        {/* Protected Routes */}
        <Route
          path="/dashboard"
          element={
            <ProtectedRoute>
              <Dashboard />
            </ProtectedRoute>
          }
        />
        <Route
          path="/projects/new"
          element={
            <ProtectedRoute>
              <CreateProject />
            </ProtectedRoute>
          }
        />
        <Route
          path="/profile"
          element={
            <ProtectedRoute>
              <Profile />
            </ProtectedRoute>
          }
        />
        <Route
          path="/projects/:projectId"
          element={
            <ProtectedRoute>
              <ProjectDetails />
            </ProtectedRoute>
          }
        />
        <Route
          path="/projects/:projectId/music-editor"
          element={
            <ProtectedRoute>
              <MusicEditor />
            </ProtectedRoute>
          }
        />
        {/* 404 Not Found */}
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}

export default App;


# FILE: ./CollaBand_BackEnd/CollaBand_Project/server.py

import uvicorn
import socket

#get local IP address (not localhost)
localIP = socket.gethostbyname(socket.gethostname())
print(localIP)

if __name__ == "__main__":
    uvicorn.run("CollaBand_Project.asgi:application", host=localIP , port=8000, reload=True)


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_Project/asgi.py

"""
ASGI config for CollaBand_Project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CollaBand_Project.settings')
django_asgi_app = get_asgi_application()

#application = get_asgi_application()

# Make all other imports below here

import socketio
from CollaBand_App.sockets import sio

application = socketio.ASGIApp(sio, django_asgi_app)


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_Project/__init__.py



# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_Project/settings.py

"""
Django settings for CollaBand_Project project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#c$^t*1pz4wx^e*as_@i_sj^&53*w=xwrk)xc8-^lx3hvel6s9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'CollaBand_App',
    'rest_framework',
    'rest_framework.authtoken',
    #To link to React
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #To link to React
    'corsheaders.middleware.CorsMiddleware',
]

#To link to React
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

#To link to React
CORS_ORIGIN_ALLOW_ALL = True

#To link to socketio
REDIS_URL = "redis://127.0.0.1:6379"

ROOT_URLCONF = 'CollaBand_Project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['Templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CollaBand_Project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'CollaBand_DB', 
        'USER': 'postgres',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1', 
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_Project/urls.py

"""
URL configuration for CollaBand_Project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.urls import path, include
from rest_framework.authtoken import views as drf_views
from CollaBand_App import views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/collaband/', include('CollaBand_App.urls')),
    path('api-token-auth/', drf_views.obtain_auth_token, name='api_token_auth'),  # Token authentication
    path('auth/register/', views.RegisterView.as_view(), name='register'),  # Registration endpoint
    path('auth/login/', views.CustomAuthToken.as_view(), name='login'),  # Login endpoint

]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_Project/wsgi.py

"""
WSGI config for CollaBand_Project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CollaBand_Project.settings')

application = get_wsgi_application()


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0007_alter_userprojectrole_role.py

# Generated by Django 5.1.2 on 2024-10-26 04:32

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0006_alter_userprojectrole_role'),
    ]

    operations = [
        migrations.AlterField(
            model_name='userprojectrole',
            name='role',
            field=models.CharField(choices=[('host', 'Host'), ('collaborator', 'Collaborator'), ('viewer', 'Viewer')], max_length=20),
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0003_project_creationdate.py

# Generated by Django 5.1.2 on 2024-10-23 22:04

import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0002_alter_chat_acceptor'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='creationdate',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0002_alter_chat_acceptor.py

# Generated by Django 5.1.2 on 2024-10-22 04:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='chat',
            name='acceptor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='acceptor_name', to=settings.AUTH_USER_MODEL),
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0006_alter_userprojectrole_role.py

# Generated by Django 5.1.2 on 2024-10-26 04:16

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0005_project_data'),
    ]

    operations = [
        migrations.AlterField(
            model_name='userprojectrole',
            name='role',
            field=models.CharField(choices=[('collaborator', 'Collaborator'), ('viewer', 'Viewer')], max_length=20),
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/__init__.py



# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0004_rename_user_userprojectrole_userid_and_more.py

# Generated by Django 5.1.2 on 2024-10-23 22:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0003_project_creationdate'),
    ]

    operations = [
        migrations.RenameField(
            model_name='userprojectrole',
            old_name='user',
            new_name='userID',
        ),
        migrations.RemoveField(
            model_name='userprojectrole',
            name='permissions',
        ),
        migrations.AddField(
            model_name='userprojectrole',
            name='projectID',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='CollaBand_App.project'),
            preserve_default=False,
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0001_initial.py

# Generated by Django 5.1.2 on 2024-10-22 03:39

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_id', models.CharField(default=uuid.uuid4, max_length=255, unique=True)),
                ('acceptor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='acceptor_name', to=settings.AUTH_USER_MODEL)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='initiator_chat', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatMsg',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='CollaBand_App.chat')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectName', models.CharField(max_length=50)),
                ('description', models.CharField(default='', max_length=250)),
                ('userID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MidiInput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviceName', models.CharField(max_length=50)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('midiInput', models.FileField(upload_to='')),
                ('projectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CollaBand_App.project')),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('content', models.CharField(max_length=200)),
                ('senderID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('projectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CollaBand_App.project')),
            ],
        ),
        migrations.CreateModel(
            name='AudioTrack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='audioTrack', max_length=50)),
                ('audioData', models.FileField(upload_to='')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('format', models.CharField(choices=[('mp3', '.MP3'), ('wav', '.WAV')], max_length=20)),
                ('sampleRate', models.IntegerField()),
                ('projectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CollaBand_App.project')),
            ],
        ),
        migrations.CreateModel(
            name='SoundFont',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('samples', models.CharField(max_length=50)),
                ('instrumentID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CollaBand_App.instrument')),
            ],
        ),
        migrations.CreateModel(
            name='UserProjectRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('host', 'Host'), ('collaborator', 'Collaborator'), ('viewer', 'Viewer')], max_length=20)),
                ('permissions', models.CharField(max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VersionControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('projectData', models.JSONField()),
                ('projectID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='CollaBand_App.project')),
            ],
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/migrations/0005_project_data.py

# Generated by Django 5.1.2 on 2024-10-23 22:45

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('CollaBand_App', '0004_rename_user_userprojectrole_userid_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='project',
            name='data',
            field=models.JSONField(default={}),
            preserve_default=False,
        ),
    ]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/models.py

from django.db import models
from django.contrib.auth.models import User
from django.utils.timezone import now

# Create your models here.


class Project(models.Model):
    projectName = models.CharField(max_length=50)
    creationdate = models.DateTimeField(default=now)
    description = models.CharField(max_length=250, default="")
    userID = models.ForeignKey(User, on_delete=models.CASCADE)
    data = models.JSONField()

    def __str__(self):
        return self.projectName
    
#class to show relationships in a project-user relation with permissions
class UserProjectRole(models.Model):
    projectRoles = [
        ('host', 'Host'),
        ('collaborator', 'Collaborator'),
        ('viewer', 'Viewer')
    ]
    
    role = models.CharField(max_length=20, choices=projectRoles)
    userID = models.ForeignKey(User, on_delete=models.PROTECT)
    projectID = models.ForeignKey(Project, on_delete=models.PROTECT)
    
    def __str__(self):
        return str(self.userID) + " - " + self.role + " of project: " + str(self.projectID)
    

#chat message that links to a Project instance
class ChatMessage(models.Model):
    senderID = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(default=now)
    content = models.CharField(max_length=200)
    projectID = models.ForeignKey(Project, on_delete=models.CASCADE)
    
    def __str__(self):
        return self.timestamp

#MidiInput stores MIDI data as a file, links to a project
class MidiInput(models.Model):
    projectID = models.ForeignKey(Project, on_delete=models.CASCADE)
    deviceName = models.CharField(max_length=50)
    timestamp = models.DateTimeField(default=now)
    midiInput = models.FileField() #left as a file of the raw input for now. Might have to change that later to be JSON
    
    def __str__(self):
        return self.deviceName

class Instrument(models.Model):
    name = models.CharField(max_length=50)
    #soundfont - use with Web Audio API
    
    def __str__(self):
        return self.name
    
class SoundFont(models.Model):
    timestamp = models.DateTimeField(default=now)
    samples = models.CharField(max_length=50)#actual sound processing here This is a PLACEHOLDER
    instrumentID = models.ForeignKey(Instrument, on_delete=models.CASCADE)
    
    def __str__(self):
        return self.samples

class AudioTrack(models.Model):
    formatTypes = [
        ('mp3', '.MP3'),
        ('wav', '.WAV'),
    ]
    
    projectID = models.ForeignKey(Project, on_delete=models.CASCADE)
    name = models.CharField(max_length=50, default="audioTrack")
    audioData = models.FileField()
    timestamp = models.DateTimeField(default=now)
    format = models.CharField(max_length=20, choices=formatTypes)
    sampleRate = models.IntegerField()
    
    def __str__(self):
        return self.name

# follow this to get audio stored as a file:
#https://stackoverflow.com/questions/46242355/saving-audio-files-in-django-tablemodel



class VersionControl(models.Model):
    projectID = models.ForeignKey(Project, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(default=now)
    projectData = models.JSONField()

    def __str__(self):
        return self.timestamp
    

#Below - socket.io tutorial models
import uuid

class Chat(models.Model):
    initiator = models.ForeignKey(
        User, on_delete=models.DO_NOTHING, related_name="initiator_chat"
    )
    acceptor = models.ForeignKey(
        User, on_delete=models.DO_NOTHING, related_name="acceptor_name",
        null=True
    )
    short_id = models.CharField(max_length=255, default=uuid.uuid4, unique=True)


class ChatMsg(models.Model):
    chat = models.ForeignKey(Chat, on_delete=models.CASCADE, related_name="messages")
    sender = models.ForeignKey(User, on_delete=models.DO_NOTHING)
    text = models.TextField()
    created_at = models.DateTimeField(default=now)

# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/serializers.py

from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Chat, ChatMsg

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username', 'email', 'password')  # Make sure 'password' is included
        extra_kwargs = {
            'password': {'write_only': True},
        }
        
    def create(self, validated_data):
        # Create user with a hashed password
        user = User.objects.create(
            username=validated_data['username'],
            email=validated_data['email']
        )
        user.set_password(validated_data['password'])
        user.save()
        return user

class MessageSerializer(serializers.ModelSerializer):
    class Meta:
        model = ChatMsg
        exclude = ("chat",)


class ChatSerializer(serializers.ModelSerializer):
    messages = MessageSerializer(many=True, read_only=True)
    class Meta:
        model = Chat
        fields = ["messages", "short_id"]

# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/__init__.py



# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/apps.py

from django.apps import AppConfig


class CollabandAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'CollaBand_App'


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/admin.py

from django.contrib import admin


from .models import Project, UserProjectRole, ChatMessage, MidiInput, Instrument, SoundFont, AudioTrack, VersionControl
# Register your models here.

admin.site.register(Project)
admin.site.register(UserProjectRole)
admin.site.register(ChatMessage)
admin.site.register(MidiInput)
admin.site.register(Instrument)
admin.site.register(SoundFont)
admin.site.register(AudioTrack)
admin.site.register(VersionControl)


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/sockets.py

import socketio
from django.conf import settings
import json
from django.shortcuts import get_object_or_404
from django.contrib.auth.models import User
from .models import Project, ChatMessage, Chat, ChatMsg
from .serializers import MessageSerializer
from asgiref.sync import sync_to_async

mgr = socketio.AsyncRedisManager(settings.REDIS_URL)
sio = socketio.AsyncServer(
    async_mode="asgi", 
    client_manager=mgr, 
    cors_allowed_origins="*", 
    ping_timeout=6000, 
    ping_interval=2500
)

# on sio connection:
#@sio.on("connect")
async def connect(sid, env):
    print("CONNECTED")
    #Manually set for testing
    #chat_id = auth["chat_id"]
    projectID = 1
    print("SocketIO connect")
    await sio.enter_room(sid, projectID)
    print("Room: ", sio.rooms(sid))
    await sio.emit("connect", f"Connected as {sid}")


def store_and_return_message(data):
    
    
    data = json.loads(data) #turns json => dict
    #data = json.dumps(data) #turns dict => json

    #(using postman it's being processed as a dict)

    print(data)

    #parse data
    senderID = data["senderID"]
    projectID = data["projectID"]
    projectData = data["data"]
    sender = get_object_or_404(User, pk=senderID)
    #if the logged-in sender does not match the message's sender
    
    # else
    # get the project 
    project = get_object_or_404(Project, pk=projectID)

    #edit the project data and save the new project 
    project.data = projectData
    project.save()
    return project


#on reception of a 'message' event
@sio.on("message")
async def print_message(sid, data):
    print("Socket ID", sid)
    

    #run the function to perform the back-end work
    project = await sync_to_async(store_and_return_message, thread_sensitive=True)(data) 
    
    currentRoom = sio.rooms(sid)[0]
    if currentRoom != project.id:
        print(f"Leaving room: {currentRoom} and joining room: {project.id}")
        await sio.leave_room(sid, currentRoom) 
        await sio.enter_room(sid, str(project.id))

    #if sender info did not match
    if project == None:
        print("Attempted spoofing detected. No changes made")
    else:
        #notify other clients in a project of a change in project data
        print("Project.data: ", project.data)
        print("Room: ", sio.rooms(sid))
        await sio.emit("new_message", data, room=str(project.id))

#on reception of a 'join_room' event
@sio.on("join_room")
async def print_join(sid, data):
    print("Socket ID", sid)
    
    #convert JSON string to python dict
    jsonData=json.loads(data)
    
    roomToJoin = jsonData["projectID"]
    
    currentRoom = sio.rooms(sid)[0]
    if currentRoom != roomToJoin:
        print(f"Leaving room: {currentRoom} and joining room: {roomToJoin}")
        await sio.leave_room(sid, currentRoom) 
        await sio.enter_room(sid, str(roomToJoin))
        
    print("Room: ", sio.rooms(sid))
    await sio.emit("new_join", data, room=str(roomToJoin))


@sio.on("disconnect")
async def disconnect(sid):
    print("SocketIO disconnect")

# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/tests.py

from django.test import TestCase

# Create your tests here.


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/urls.py

from django.urls import path
from . import views  # Import views from the app

urlpatterns = [
    #path('home/', views.homepage.as_view(), name='homepage'),  # Example view
    path('dashboard/', views.dashboard, name='dashboard'),  # Another view
    path('project-<int:projectID>/', views.projectDAW, name='projectDAW'),
    path('user-settings/', views.userSettings, name='userSettings'),
    path('contact/', views.contact, name='contact'),
    path('login/', views.login, name='login'),
    #path("chat-ex/", views.GetChat.as_view(), name="get-chats"),
    path('home/', views.home_view, name='home'),
    path('login/', views.CustomAuthToken.as_view(), name='login'),
    path('register/', views.RegisterView.as_view(), name='register'),

]


# FILE: ./CollaBand_BackEnd/CollaBand_Project/CollaBand_App/views.py

from django.shortcuts import render

# Create your views here.
'''
from rest_framework.response import Response
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.decorators import APIView
from rest_framework import viewsets
#from .serializers import 
from rest_framework import generics
from .models import MenuItem, Cart, Order, OrderItem
from .serializers import MenuItemSerializer, UserSerializer, ManagerDelete, CartSerializer, OrderSerializer, OrderItemSerializer, DeliveryOrderSerializer, ManagerOrderSerializer
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from django.contrib.auth.models import User, Group, AnonymousUser
from django.db.models import Exists
from rest_framework.decorators import permission_classes, throttle_classes
from django.contrib.auth.mixins import UserPassesTestMixin
from datetime import date
from django.shortcuts import get_list_or_404, get_object_or_404
'''

from django.shortcuts import render
# Create your views here.

from django.http import HttpResponse, HttpResponseNotAllowed, HttpResponsePermanentRedirect, JsonResponse, Http404 
from django.urls import reverse
from django.shortcuts import get_object_or_404, render
from django.views import View
from django.views.generic.base import TemplateView
from rest_framework.response import Response
from CollaBand_App.models import Project, UserProjectRole, User
import json
from rest_framework.decorators import api_view, permission_classes
from django.contrib.auth.models import User
from django.contrib.auth import authenticate
from .serializers import UserSerializer, ChatSerializer
from .models import Project, Chat
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework import status, generics
from rest_framework.authtoken.models import Token
from django.contrib.auth.models import User


#for home
def home_view(request):
    return render(request, 'index_toros.html')

def homepage(request):
    return 200

'''def dashboard(request):
    return 200'''

#class view to display the homepage template
class homepage(TemplateView):
    template_name='index.html'
    

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = [AllowAny]
    serializer_class = UserSerializer

# Custom Login View (to obtain auth token)
class CustomAuthToken(ObtainAuthToken):
    def post(self, request, *args, **kwargs):
        email_or_username = request.data.get('email_or_username')
        password = request.data.get('password')

        # Try to authenticate with the provided credentials
        user = authenticate(username=email_or_username, password=password)
        if not user:
            # If no user found by username, try email
            try:
                user_obj = User.objects.get(email=email_or_username)
                user = authenticate(username=user_obj.username, password=password)
            except User.DoesNotExist:
                return Response({"error": "Invalid credentials"}, status=status.HTTP_400_BAD_REQUEST)

        if user:
            token, created = Token.objects.get_or_create(user=user)
            return Response({
                'token': token.key,
                'user': {
                    'id': user.id,
                    'username': user.username,
                    'email': user.email,
                }
            }, status=status.HTTP_200_OK)

        return Response({"error": "Invalid credentials"}, status=status.HTTP_400_BAD_REQUEST)

# Login View (Retained for completeness)
@api_view(['POST'])
@permission_classes([AllowAny])
def login(request):
    return Response({'message': 'Login endpoint'}, status=status.HTTP_200_OK)

#Dashboard View
@api_view(['GET', 'PUT', 'POST', 'DELETE'])
def dashboard(request):
    if request.user.is_authenticated: #NP note: could change this to a decorator
        user = request.user
        if request.body:
            data = json.loads(request.body.decode('utf-8'))
        
        if request.method == 'GET':     #return user's projects  
            try:
                #pull all projects which given user is a member and their role information
                userProjects = UserProjectRole.objects.filter(userID=user).select_related('projectID')

                projectsWithRole = [ {
                    'project_id': project.projectID.id,
                    'project_name': project.projectID.projectName,
                    'description':project.projectID.description,
                    'role': project.role
                } 
                for project in userProjects ]

                toReturn = {
                    'message':'Projects returned',
                    'projects':projectsWithRole
                }
                return Response(toReturn, status=200)    
                #projects = Project.objects.filter(userID=user)
            
            except:
                return Response({'error':'No projects found'}, status=404)

        elif request.method == 'POST':  #create new project 
            try:
                newProjectName = data.get('projectName')
                newProjectDescription = data.get('description', "")
                
                if newProjectName:
                    #create new project
                    projectToCreate = Project.objects.create(projectName=newProjectName, description=newProjectDescription, userID=user)

                    #assign user to that project as the host
                    UserProjectRole.objects.create(role='host', userID=user, projectID=projectToCreate)
                return Response({'message':'New project created successfully'}, status=201)
        
            except:
                return Response({'error':'Project could not be created'}, status=400)
        
        elif request.method == 'PUT':   #modify a project field
            #try:
                projectID = data.get('projectID')
                projectToChange = Project.objects.get(id=projectID, userID=user)
                
                #changing project name
                newProjectName = data.get('projectName', projectToChange.projectName)       #second value is the default if no parameter is sent in the JSON
                newProjectDescription = data.get('description', projectToChange.description) 

                #set project changes
                projectToChange.projectName = newProjectName
                projectToChange.description = newProjectDescription

                # save project changes
                projectToChange.save() 

                #if the user has added a user as a specific role
                newUserRole = data.get('role')
                if newUserRole: 
                    userToAddID = data.get('userID')
                    newUserToAdd = User.objects.get(id=userToAddID)
                    #create instance to then add
                    userRoleToCreate = UserProjectRole()
                    userRoleToCreate.role = newUserRole
                    userRoleToCreate.userID = newUserToAdd
                    userRoleToCreate.projectID = projectToChange
                    #save new role relation
                    userRoleToCreate.save()


                return Response({'message':'Project modified successfully'}, status=200)
            #except:
                return Response({'error':'Project could not be modified'}, status=404)
           
        elif request.method == 'DELETE': #delete a project
            try:
                projectID = data.get('projectID')
                projectToDelete = Project.objects.get(id=projectID, userID=user)   

                #delete project
                projectToDelete.delete()
                return Response({'message':'Project deleted successfully'}, status=200)
            except:
                return Response({'error':'Project not found'}, status=404)
        
        else:
            return HttpResponseNotAllowed(['GET', 'POST', 'PUT', 'DELETE'])
    else: 
        return Response({'message':'Please log in'}) #placeholder
    
@api_view(['GET'])
def projectDAW(request, projectID):
    if request.method == 'GET':
        user = request.user
        try:
            #pull all projects which given user is a member and match the requested projectID, and their role information
            userProject = UserProjectRole.objects.filter(userID=user, projectID=projectID).select_related('projectID')

            projectWithRole = [ {
                'project_id': project.projectID.id,
                'project_name': project.projectID.projectName,
                'description':project.projectID.description,
                'role': project.role,
                'data': project.projectID.data
            } 
            for project in userProject ]

            toReturn = {
                'message':'Project returned',
                'project':projectWithRole
            }
            return Response(toReturn, status=200)
        except:
            return Response({'error':'Project not found'}, status=404)


def login(request):
    return Response(status=200)

def contact(request):
    return Response(status=200)

def userSettings(request):
    return Response(status=200)


#socket.io Tutorial
from rest_framework.generics import GenericAPIView
from rest_framework.permissions import IsAuthenticated
from .serializers import ChatSerializer
from .models import Chat
from rest_framework import status

class GetChat(GenericAPIView):
    #permission_classes = [IsAuthenticated]
    serializer_class = ChatSerializer

    def get(self, request):
        #chat, created = Chat.objects.get_or_create(initiator__id=request.user.pk)
        chat, created = Chat.objects.get_or_create(initiator__id=1)
        serializer = self.serializer_class(instance=chat)
        return Response({"message": "Chat gotten", "data": serializer.data}, status=status.HTTP_200_OK)


# FILE: ./CollaBand_BackEnd/CollaBand_Project/Templates/index_toros.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CS 4366 Senior Capstone</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <ul>
				<li><a href="index.html">Home</a></li>
				<li><a href="about_us.html">About Us</a></li>
				<li><a href="meetings.html">Meetings</a></li>
				<li><a href="upcoming_schedules.html">Upcoming Schedules</a></li>
		    		<li><a href="/collaband">CollaBand Home</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <h1>CS 4366 Senior Capstone</h1>
		<h2>Team Toros</h2>
		<h3>Nathan Pierce: Group Leader</h3>
		<h3>Brett Alford: Database Engineer</h3>
		<h3>Yash Sharma: Back End Engineer</h3>
		<h3>Jaron Hardage: Front End Engineer</h3>
		<p>Link to GitHub <a href="https://toaster124.github.io/CS-Capstone/index.html" target="_blank">HERE</a>.</p>
        <p>Link to Jira <a href="https://schoolingscollege.atlassian.net/jira/software/projects/SCRUM/boards/1" target="_blank">HERE</a>.</p>
    </main>
</body>
</html>


# FILE: ./CollaBand_BackEnd/CollaBand_Project/manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'CollaBand_Project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
